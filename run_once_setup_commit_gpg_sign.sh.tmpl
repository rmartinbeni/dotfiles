#!/bin/bash
set -euo pipefail

if [[ "${SETUP_COMMIT_GPG,,}" != "true" ]]; then
  echo "‚ùå GPG setup is disabled. Skipping."
  exit 0
fi

NAME="{{ .git_name }}"
EMAIL="{{ .git_email }}"
EXPIRE_DATE="0"

command -v gpg >/dev/null 2>&1 || { echo "‚ùå GPG not installed. Aborting." >&2; exit 1; }

KEY_ID=$(gpg --list-secret-keys --with-colons "$EMAIL" 2>/dev/null | awk -F: '/^fpr/{print $10; exit}')

if [[ -n "$KEY_ID" ]]; then
  echo "‚ö†Ô∏è A GPG key already exists for $EMAIL. Skipping key generation."
else
  tmp=$(mktemp)
  trap 'rm -f "$tmp"' EXIT

  cat >"$tmp" <<EOF
%no-protection
Key-Type: eddsa
Key-Curve: ed25519
Subkey-Type: ecdh
Subkey-Curve: cv25519
Name-Real: $NAME
Name-Email: $EMAIL
Expire-Date: $EXPIRE_DATE
%commit
EOF

  echo "üîê Generating GPG ed25519 key..."
  gpg --batch --generate-key "$tmp"
  KEY_ID=$(gpg --list-secret-keys --with-colons "$EMAIL" | awk -F: '/^fpr/{print $10; exit}')
  [[ -z "$KEY_ID" ]] && { echo "‚ùå Could not obtain key ID." >&2; exit 1; }
  echo "‚úÖ Key generated with ID: $KEY_ID"
fi

if [[ "$(git config --global --get user.signingkey || true)" != "$KEY_ID" ]]; then
  echo "‚öôÔ∏è Configuring Git..."
  git config --global user.signingkey "$KEY_ID"
  git config --global commit.gpgsign true
  echo "‚úÖ Git configured with key ID: $KEY_ID"
else
  echo "‚ö†Ô∏è GPG key is already configured in Git. Skipping Git configuration."
fi

CHEZMOI_FILE="$HOME/.config/chezmoi/chezmoi.toml"
if ! grep -q "key = \"$KEY_ID\"" "$CHEZMOI_FILE"; then
  echo -e "\n[gpg]\n  key = \"$KEY_ID\"" >> "$CHEZMOI_FILE"
  echo "‚ûï Added [gpg] section with key in $CHEZMOI_FILE."
  sed -i -E "s|^\s*git_gpgkey\s*=.*$|  git_gpgkey = \"$KEY_ID\"|" "$CHEZMOI_FILE"
  echo "‚ûï Inserted git_gpgkey in existing [data] section of $CHEZMOI_FILE"
else
  echo "‚ö†Ô∏è GPG key is already present in $CHEZMOI_FILE. Skipping addition."
fi

echo "üìã Public key (copy and paste this into GitHub/GitLab):"
gpg --armor --export "$KEY_ID"
